create Database Bookstore_data;
use Bookstore_data;

create table book_language (
language_id INT PRIMARY KEY AUTO_INCREMENT,
language_name varchar(50) NOT NULL
);
CREATE TABLE publisher (
    publisher_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    contact_email VARCHAR(100)
);

CREATE TABLE author (
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    bio TEXT
);

CREATE TABLE country (
    country_id INT PRIMARY KEY AUTO_INCREMENT,
    country_name VARCHAR(100) NOT NULL
);

CREATE TABLE address_status (
    status_id INT PRIMARY KEY AUTO_INCREMENT,
    status_name VARCHAR(50) NOT NULL
);

CREATE TABLE shipping_method (
    shipping_id INT PRIMARY KEY AUTO_INCREMENT,
    method_name VARCHAR(100),
    cost DECIMAL(10, 2)
);

CREATE TABLE order_status (
    status_id INT PRIMARY KEY AUTO_INCREMENT,
    status_name VARCHAR(50)
);


CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    language_id INT,
    publisher_id INT,
    price DECIMAL(10, 2),
    stock INT,
    FOREIGN KEY (language_id) REFERENCES book_language(language_id),
    FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id)
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    full_name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20)
);

CREATE TABLE address (
    address_id INT PRIMARY KEY AUTO_INCREMENT,
    street VARCHAR(255),
    city VARCHAR(100),
    postal_code VARCHAR(20),
    country_id INT,
    FOREIGN KEY (country_id) REFERENCES country(country_id)
);


CREATE TABLE book_author (
    book_id INT,
    author_id INT,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id),
    FOREIGN KEY (author_id) REFERENCES author(author_id)
);

CREATE TABLE customer_address (
    customer_id INT,
    address_id INT,
    status_id INT,
    PRIMARY KEY (customer_id, address_id),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (address_id) REFERENCES address(address_id),
    FOREIGN KEY (status_id) REFERENCES address_status(status_id)
);


CREATE TABLE cust_order (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    shipping_id INT,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status_id INT,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (shipping_id) REFERENCES shipping_method(shipping_id),
    FOREIGN KEY (status_id) REFERENCES order_status(status_id)
);

CREATE TABLE order_line (
    order_id INT,
    book_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    PRIMARY KEY (order_id, book_id),
    FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id)
);

CREATE TABLE order_history (
    history_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    status_id INT,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
    FOREIGN KEY (status_id) REFERENCES order_status(status_id)
);

INSERT INTO book_language (language_name) VALUES
('English'), ('French'), ('Spanish'), ('Swahili');

INSERT INTO publisher (name, contact_email) VALUES
('Moonlight Publishing', 'contact@moonlightpub.com'),
('Starlit Books', 'info@starlitbooks.org'),
('WordWeavers Ltd.', 'hello@wordweavers.com');

INSERT INTO author (name, bio) VALUES
('Lena Adair', 'Writes historical fiction and contemporary drama.'),
('Carlos Mendez', 'Latin-American poet and novelist.'),
('Njoki Wambui', 'Kenyan author of children’s books and folklore.'),
('Milo Knox', 'Sci-fi and fantasy author.');

INSERT INTO country (country_name) VALUES
('Kenya'), ('USA'), ('France'), ('Brazil');

INSERT INTO address_status (status_name) VALUES
('Current'), ('Old');

INSERT INTO shipping_method (method_name, cost) VALUES
('Standard Shipping', 3.99),
('Express Shipping', 7.99),
('Overnight', 12.50);

INSERT INTO order_status (status_name) VALUES
('Pending'), ('Shipped'), ('Delivered'), ('Cancelled');


INSERT INTO book (title, language_id, publisher_id, price, stock) VALUES
('The Sands of Time', 1, 1, 12.99, 25),
('Les Étoiles du Destin', 2, 2, 15.50, 10),
('Echoes of the Savannah', 4, 3, 9.75, 40),
('Galactic Runners', 1, 1, 17.20, 15);

INSERT INTO customer (full_name, email, phone) VALUES
('Alice Mutua', 'alice.m@example.com', '+254712345678'),
('David Okoth', 'david.o@example.com', '+254701112233'),
('Jean Moreau', 'jean.m@example.fr', '+33122334455');

INSERT INTO address (street, city, postal_code, country_id) VALUES
('123 Sunset Blvd', 'Nairobi', '00100', 1),
('456 Ocean Drive', 'Mombasa', '80100', 1),
('78 Rue Lafayette', 'Paris', '75009', 3),
('999 Freedom Ave', 'New York', '10001', 2);


INSERT INTO book_author (book_id, author_id) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (1, 4); -- book 1 co-authored

INSERT INTO customer_address (customer_id, address_id, status_id) VALUES
(1, 1, 1),
(1, 2, 2),
(2, 2, 1),
(3, 3, 1);

INSERT INTO cust_order (customer_id, shipping_id, status_id) VALUES
(1, 1, 1), -- Pending
(2, 2, 2), -- Shipped
(3, 1, 3); -- Delivered

INSERT INTO order_line (order_id, book_id, quantity, price) VALUES
(1, 1, 2, 12.99),
(1, 3, 1, 9.75),
(2, 4, 1, 17.20),
(3, 2, 1, 15.50);

INSERT INTO order_history (order_id, status_id) VALUES
(1, 1), -- Pending
(2, 1), (2, 2), -- From Pending to Shipped
(3, 1), (3, 2), (3, 3); -- Progression to Delivered

Create a user for data entry
CREATE USER 'bookstore_staff'@'localhost' IDENTIFIED BY 'securePass123';
GRANT SELECT, INSERT, UPDATE ON bookstore_db.* TO 'bookstore_staff'@'localhost';

-- Read-only user
CREATE USER 'bookstore_analyst'@'localhost' IDENTIFIED BY 'securePass456';
GRANT SELECT ON bookstore_db.* TO 'bookstore_analyst'@'localhost';

-- Admin role
CREATE USER 'bookstore_admin'@'localhost' IDENTIFIED BY 'SuperSecure789!';
GRANT ALL PRIVILEGES ON bookstore_db.* TO 'bookstore_admin'@'localhost';

List all books with authors
SELECT b.title, a.name AS author
FROM book b
JOIN book_author ba ON b.book_id = ba.book_id
JOIN author a ON ba.author_id = a.author_id;

Show orders with customer names and total price
SELECT o.order_id, c.full_name, SUM(ol.quantity * ol.price) AS total
FROM cust_order o
JOIN customer c ON o.customer_id = c.customer_id
JOIN order_line ol ON o.order_id = ol.order_id
GROUP BY o.order_id, c.full_name;
